import os

os.environ["AWS_PROFILE"] = "serverless"

import pandas as pd
import awswrangler as wr

import boto3
import io
import pandas as pd


# Read single parquet file from S3
def pd_read_s3_parquet(bucket, key, s3_client=None, **args):
    if s3_client is None:
        s3_client = boto3.client('s3')
    obj = s3_client.get_object(Bucket=bucket, Key=key)
    return pd.read_parquet(io.BytesIO(obj['Body'].read()), **args)


# Read multiple parquets from a folder on S3 generated by spark
def pd_read_s3_multiple_parquets(bucket, filepath, s3=None,
                                 s3_client=None, verbose=False, **args):
    if not filepath.endswith('/'):
        filepath = filepath + '/'  # Add '/' to the end
    if s3_client is None:
        s3_client = boto3.client('s3')
    if s3 is None:
        s3 = boto3.resource('s3')
    s3_keys = [item.key for item in s3.Bucket(bucket).objects.filter(Prefix=filepath)
               if item.key.endswith('.parquet')]
    if not s3_keys:
        print('No parquet found in', bucket, filepath)
    elif verbose:
        print('Load parquets:')
        for p in s3_keys:
            print(p)
    dfs = [pd_read_s3_parquet(bucket=bucket, key=key, s3_client=s3_client, **args)
           for key in s3_keys]
    return pd.concat(dfs, ignore_index=True)


df = pd_read_s3_multiple_parquets('serverless-crypto-analysis-prd', 'raw/coinmarketcap_data')
# df = pd.read_csv("s3://serverless-crypto-analysis-prd/raw/csv/coinmarketcap_data.csv")

# print(df.dtypes)
def convert_types(df):
    print(df.columns)
    column_type_mapping = {"id": str,
                           "name": str,
                           "symbol": str,
                           "rank": pd.to_numeric,
                           "price_usd": pd.to_numeric,
                           "price_btc": pd.to_numeric,
                           "24h_volume_usd": pd.to_numeric,
                           "market_cap_usd": pd.to_numeric,
                           "available_supply": pd.to_numeric,
                           "total_supply": pd.to_numeric,
                           "max_supply": pd.to_numeric,
                           "percent_change_1h": pd.to_numeric,
                           "percent_change_24h": pd.to_numeric,
                           "percent_change_7d": pd.to_numeric,
                           "last_updated": pd.to_numeric,
                           "date": pd.to_datetime,
                           "hour": pd.to_numeric,
                           "minute": pd.to_numeric,
                           "uuid": pd.to_numeric
                           }
    df_updated = pd.DataFrame()
    for column, type_func in column_type_mapping.items():
        print(column, type_func)
        if not isinstance(type_func, type):
            df_updated[column] = type_func(df[column])
        else:
            df_updated[column] = df[column]
    df_updated = df_updated[~df_updated["rank"].isnull()]
    df_updated["rank"] = df_updated["rank"].astype('int64')
    return df_updated


print(df.dtypes)
df = convert_types(df)
df.to_parquet("/Users/vincent/Desktop/db.parquet")
wr.pandas.to_parquet(
    dataframe=df,
    mode="overwrite",
    path="s3://serverless-crypto-analysis-prd/raw/coinmarketcap_data",
    preserve_index=False)
