service: serverless-crypto-analysis


provider:
  name: aws
  runtime: python3.6
  region: eu-central-1
  stage: ${opt:stage, "dev"}

package:
  excludeDevDependencies: true
#  exclude:
#    - "*/**"
  exclude:
    - 'node_modules/**'
    - 'serverless_crypto_analysis_tests/**'

custom:
  unique_stack_name: ${self:service}-${self:provider.stage}
  bucket_glue: ${self:custom.unique_stack_name}-glue
  bucket_data: ${self:custom.unique_stack_name}

  glue_role: arn:aws:iam::077590795309:role/glue-admin

  bucket_glue_url: s3://${self:custom.bucket_glue}
  
  glue_get_coinmarketcap_data:  ${self:custom.unique_stack_name}-get_coinmarketcap_data
  glue_get_coinmarketcap_data_script: ${self:custom.bucket_glue_url}/get_coinmarketcap_data.py
  
  glue_newcomers: ${self:custom.unique_stack_name}-newcomers
  glue_newcomers_script: ${self:custom.bucket_glue_url}/newcomers.py
  glue_get_coinmarketcap_data_libs: ${self:custom.bucket_glue_url}/libs

  s3Sync:
    - bucketName: ${self:custom.bucket_glue}
      localDir:  serverless_crypto_analysis/glue


plugins:
  - serverless-s3-remover
  - serverless-s3-sync
  - serverless-python-requirements

functions:
  newcomers:
    handler: serverless_crypto_analysis/lambda_function/newcomers.lambda_handler
    events:
      - s3:
          bucket: ${self:custom.bucket_data}
          event: s3:ObjectCreated:*
          rules:
            - prefix: raw/coinmarketcap_data
            - suffix: .parquet
    # you can specify environment variables specifically for this lambda function
    environment:
        ATHENA_DB: coinmarketcap
        ATHENA_TABLE: coinmarketcap_data
        BUCKET_DATA: serverless-crypto-analysis-stg
        KEY_DATA: stg/newcomers
        RANK: "[200,100,75,50,40,30,20,10,5]"
    timeout: 900

resources:
  Resources:
    S3GlueBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket_glue}
    S3DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket_data}
    GlueJobGetCoinmarketcapData:
      Type: AWS::Glue::Job
      Properties: 
        Role: ${self:custom.glue_role}
        Command:   
          Name: pythonshell
          PythonVersion: 3
          ScriptLocation: ${self:custom.glue_get_coinmarketcap_data_script}
        Name: ${self:custom.glue_get_coinmarketcap_data}
        DefaultArguments:
          --extra-py-files: ${self:custom.glue_get_coinmarketcap_data_libs}/pyarrow-0.14.1-cp36-cp36m-manylinux1_x86_64.whl,${self:custom.glue_get_coinmarketcap_data_libs}/requests-2.22.0-py2.py3-none-any.whl,${self:custom.glue_get_coinmarketcap_data_libs}/s3fs-0.3.4-py3-none-any.whl
    GlueTriggerGetCoinmarketcapData:
      Type: AWS::Glue::Trigger
      Properties:
        Type: SCHEDULED
        Schedule: cron(0 * * * ?)        
        Actions:
          - JobName: ${self:custom.glue_get_coinmarketcap_data}
        Name: ${self:custom.glue_get_coinmarketcap_data}
#    GlueJobNewcomers:
#      Type: AWS::Glue::Job
#      Properties:
#        Role: ${self:custom.glue_role}
#        Command:
#          Name: pythonshell
#          PythonVersion: 3
#          ScriptLocation: ${self:custom.glue_newcomers_script}
#        Name: ${self:custom.glue_newcomers}
#        DefaultArguments:
#          --extra-py-files: ${self:custom.glue_get_coinmarketcap_data_libs}/pyarrow-0.14.1-cp36-cp36m-manylinux1_x86_64.whl,${self:custom.glue_get_coinmarketcap_data_libs}/requests-2.22.0-py2.py3-none-any.whl,${self:custom.glue_get_coinmarketcap_data_libs}/s3fs-0.3.5-py3-none-any.whl
#        ExecutionProperty:
#          MaxConcurrentRuns: 4
#    GlueTriggerNewcomers100:
#      Type: AWS::Glue::Trigger
#      Properties:
#        Type: CONDITIONAL
#        Actions:
#          - JobName: !Ref GlueJobNewcomers
#            Arguments:
#              --bucket: ${self:custom.bucket_data}
#              --source_key: raw/coinmarketcap_data
#              --dest_key_json: stg/newcomers/top_100/json
#              --dest_key_parquet: stg/newcomers/top_100/parquet
#              --rank: 100
#        Name: ${self:custom.glue_newcomers}-100
#        Predicate:
#          Conditions:
#            - LogicalOperator: EQUALS
#              JobName: !Ref GlueJobGetCoinmarketcapData
#              State: SUCCEEDED
#    GlueTriggerNewcomersOnDemand:
#      Type: AWS::Glue::Trigger
#      Properties:
#        Type: ON_DEMAND
#        Actions:
#          - JobName: !Ref GlueJobNewcomers
#            Arguments:
#              --bucket: ${self:custom.bucket_data}
#              --source_key: raw/coinmarketcap_data
#              --dest_key_json: stg/newcomers/top_100/json
#              --dest_key_parquet: stg/newcomers/top_100/parquet
#              --rank: 100
#        Name: ${self:custom.glue_newcomers}-100-on-demand
#    GlueTriggerNewcomers200:
#      Type: AWS::Glue::Trigger
#      Properties:
#        Type: CONDITIONAL
#        Actions:
#          - JobName: !Ref GlueJobNewcomers
#            Arguments:
#              --bucket: ${self:custom.bucket_data}
#              --source_key: raw/coinmarketcap_data
#              --dest_key_json: stg/newcomers/top_200/json
#              --dest_key_parquet: stg/newcomers/top_200/parquet
#              --rank: 200
#        Name: ${self:custom.glue_newcomers}-200
#        Predicate:
#          Conditions:
#            - LogicalOperator: EQUALS
#              JobName: !Ref GlueJobGetCoinmarketcapData
#              State: SUCCEEDED
#    GlueTriggerNewcomers50:
#      Type: AWS::Glue::Trigger
#      Properties:
#        Type: CONDITIONAL
#        Actions:
#          - JobName: !Ref GlueJobNewcomers
#            Arguments:
#              --bucket: ${self:custom.bucket_data}
#              --source_key: raw/coinmarketcap_data
#              --dest_key_json: stg/newcomers/top_50/json
#              --dest_key_parquet: stg/newcomers/top_50/parquet
#              --rank: 50
#        Name: ${self:custom.glue_newcomers}-50
#        Predicate:
#          Conditions:
#            - LogicalOperator: EQUALS
#              JobName: !Ref GlueJobGetCoinmarketcapData
#              State: SUCCEEDED